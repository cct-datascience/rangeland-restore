# Level 1 ANOVA for zero-inflated beta BRTE model
model{
  
  for(i in 1:N){ # loop through all observations
    #likelihood for psi, mixture parameter, indicating propotion of discrete observations
    y.discrete[i] ~ dbern(psi)
    # replicated data
    y.discrete.rep[i] ~ dbern(psi)
  }
  

  for(i in 1:n.discrete){ # loop through discrete observations
    # likelihood for gamma, probability of presence
    y.d[i] ~ dbern(mu[i])
    # replicated data
    y.d.rep[i] ~ dbern(mu[i])
    
    # mean ANOVA model 
    logit(mu[i]) <- alpha + beta[1]*POSE[i] + beta[2]*POFE[i] + beta[3]*VUMI[i] +
    beta[4]*ELEL[i] + beta[5]*high[i] + beta[6]*fall[i] + beta[7]*spring[i] +
    beta[8]*coated[i] +
    beta[9]*POSE[i]*high[i] + beta[10]*POFE[i]*high[i] + beta[11]*VUMI[i]*high[i]+ beta[12]*ELEL[i]*high[i] +
    beta[13]*POSE[i]*fall[i] + beta[14]*POFE[i]*fall[i] + beta[15]*VUMI[i]*fall[i] + beta[16]*ELEL[i]*fall[i] + 
    beta[17]*POSE[i]*spring[i] + beta[18]*POFE[i]*spring[i] + beta[19]*VUMI[i]*spring[i] + beta[20]*ELEL[i]*spring[i] + 
    beta[21]*POSE[i]*coated[i] + beta[22]*POFE[i]*coated[i] + beta[23]*VUMI[i]*coated[i] + beta[24]*ELEL[i]*coated[i] + 
    beta[25]*high[i]*fall[i] + beta[26]*high[i]*spring[i] + beta[27]*high[i]*coated[i] + 
    beta[28]*fall[i]*coated[i] + beta[29]*spring[i]*coated[i] +
    eps[block.d[i]]
  }
   
  
  for(i in 1:n.cont){ # loop through continuous (0,1) observations
  # likelihood for mu, tau (beta parameters)
    y.c[i] ~ dbeta(p[i], q[i])
    # replicated data
    y.c.rep[i] ~ dbeta(p[i], q[i])
    
    # reparameterization to mean and precision
    p[i] <- mu2[i] * tau
    q[i] <- (1 - mu2[i]) * tau
    
    # mean ANOVA model 
    logit(mu2[i]) <- alpha + beta[1]*POSE2[i] + beta[2]*POFE2[i] + beta[3]*VUMI2[i] +
    beta[4]*ELEL2[i] + beta[5]*high2[i] + beta[6]*fall2[i] + beta[7]*spring2[i] +
    beta[8]*coated2[i] +
    beta[9]*POSE2[i]*high2[i] + beta[10]*POFE2[i]*high2[i] + beta[11]*VUMI2[i]*high2[i]+ beta[12]*ELEL2[i]*high2[i] +
    beta[13]*POSE2[i]*fall2[i] + beta[14]*POFE2[i]*fall2[i] + beta[15]*VUMI2[i]*fall2[i] + beta[16]*ELEL2[i]*fall2[i] + 
    beta[17]*POSE2[i]*spring2[i] + beta[18]*POFE2[i]*spring2[i] + beta[19]*VUMI2[i]*spring2[i] + beta[20]*ELEL2[i]*spring2[i] + 
    beta[21]*POSE2[i]*coated2[i] + beta[22]*POFE2[i]*coated2[i] + beta[23]*VUMI2[i]*coated2[i] + beta[24]*ELEL2[i]*coated2[i] + 
    beta[25]*high2[i]*fall2[i] + beta[26]*high2[i]*spring2[i] + beta[27]*high2[i]*coated2[i] + 
    beta[28]*fall2[i]*coated2[i] + beta[29]*spring2[i]*coated2[i] +
    eps[block.c[i]]
  } 
    
  # Identifiable intercept, post sweeping random effect means into intercept
  alpha.star <- alpha + mean(eps[])
  
  # Relatively non-informative priors
  
  # random effects of block
  for(b in 1:Nb){ # number of blocks
    eps[b] ~ dnorm(0, tau.eps)
    
    # Identifiable random effects - post-sweeping of mean REs by block
    eps.star[b] <- eps[b] - mean(eps[])
  }
  
  # Block level precisions with folded T priors
  tau.eps ~ dt(0, 10, 2)T(0, )
  
  # Coefficient root notes
  alpha ~ dnorm(0, 0.0001)

  for(l in 1:nL){ # Number of treatment offsets
    beta[l] ~ dnorm(0, 0.0001)
  }
  
  # General priors
  psi ~ dunif(0, 1)
  tau ~ dt(0, 10, 2)T(0, )
  sig <- pow(tau, -0.5)
  sig.eps <- pow(tau.eps, -0.5)
  
  
  # Calculations to monitor, only two-way combinations
  int_Beta[1] <- beta[1] + beta[5] + beta[9] # POSE:high
  int_Beta[2] <- beta[2] + beta[5] + beta[10] # POFE:high
  int_Beta[3] <- beta[3] + beta[5] + beta[11] # VUMI:high
  int_Beta[4] <- beta[4] + beta[5] + beta[12] # ELEL:high
  int_Beta[5] <- beta[1] + beta[6] + beta[13] # POSE:fall
  int_Beta[6] <- beta[2] + beta[6] + beta[14] # POFE:fall
  int_Beta[7] <- beta[3] + beta[6] + beta[15] # VUMI:fall
  int_Beta[8] <- beta[4] + beta[6] + beta[16] # ELEL:fall
  int_Beta[9] <- beta[1] + beta[7] + beta[17] # POSE:spring
  int_Beta[10] <- beta[2] + beta[7] + beta[18] # POFE:spring
  int_Beta[11] <- beta[3] + beta[7] + beta[19] # VUMI:spring
  int_Beta[12] <- beta[4] + beta[7] + beta[20] # ELEL:spring
  int_Beta[13] <- beta[1] + beta[8] + beta[21] # POSE:coated
  int_Beta[14] <- beta[2] + beta[8] + beta[22] # POFE:coated
  int_Beta[15] <- beta[3] + beta[8] + beta[23] # VUMI:coated
  int_Beta[16] <- beta[4] + beta[8] + beta[24] # ELEL:coated
  int_Beta[17] <- beta[5] + beta[6] + beta[25] # high:fall
  int_Beta[18] <- beta[5] + beta[7] + beta[26] # high:spring
  int_Beta[19] <- beta[5] + beta[8] + beta[27] # high:coated
  int_Beta[20] <- beta[6] + beta[8] + beta[28] # fall:coated
  int_Beta[21] <- beta[7] + beta[8] + beta[29] # spring:coated
  
  # Calculations to monitor, only two-way combinations
  Diff_Beta[1] <- ilogit(alpha.star + beta[1]) - ilogit(alpha.star) # POSE
  Diff_Beta[2] <- ilogit(alpha.star + beta[2]) - ilogit(alpha.star) # POFE
  Diff_Beta[3] <- ilogit(alpha.star + beta[3]) - ilogit(alpha.star) # VUMI
  Diff_Beta[4] <- ilogit(alpha.star + beta[4]) - ilogit(alpha.star) # ELEL
  Diff_Beta[5] <- ilogit(alpha.star + beta[5]) - ilogit(alpha.star) # high
  Diff_Beta[6] <- ilogit(alpha.star + beta[6]) - ilogit(alpha.star) # fall
  Diff_Beta[7] <- ilogit(alpha.star + beta[7]) - ilogit(alpha.star) # spring
  Diff_Beta[8] <- ilogit(alpha.star + beta[8]) - ilogit(alpha.star) # coated

  diff_Beta[1] <- ilogit(alpha.star + beta[1] + beta[5] + beta[9]) - ilogit(alpha.star) # POSE:high
  diff_Beta[2] <- ilogit(alpha.star + beta[2] + beta[5] + beta[10]) - ilogit(alpha.star) # POFE:high
  diff_Beta[3] <- ilogit(alpha.star + beta[3] + beta[5] + beta[11]) - ilogit(alpha.star) # VUMI:high
  diff_Beta[4] <- ilogit(alpha.star + beta[4] + beta[5] + beta[12]) - ilogit(alpha.star) # ELEL:high
  diff_Beta[5] <- ilogit(alpha.star + beta[1] + beta[6] + beta[13]) - ilogit(alpha.star) # POSE:fall
  diff_Beta[6] <- ilogit(alpha.star + beta[2] + beta[6] + beta[14]) - ilogit(alpha.star) # POFE:fall
  diff_Beta[7] <- ilogit(alpha.star + beta[3] + beta[6] + beta[15]) - ilogit(alpha.star) # VUMI:fall
  diff_Beta[8] <- ilogit(alpha.star + beta[4] + beta[6] + beta[16]) - ilogit(alpha.star) # ELEL:fall
  diff_Beta[9] <- ilogit(alpha.star + beta[1] + beta[7] + beta[17]) - ilogit(alpha.star) # POSE:spring
  diff_Beta[10] <- ilogit(alpha.star + beta[2] + beta[7] + beta[18]) - ilogit(alpha.star) # POFE:spring
  diff_Beta[11] <- ilogit(alpha.star + beta[3] + beta[7] + beta[19]) - ilogit(alpha.star) # VUMI:spring
  diff_Beta[12] <- ilogit(alpha.star + beta[4] + beta[7] + beta[20]) - ilogit(alpha.star) # ELEL:spring
  diff_Beta[13] <- ilogit(alpha.star + beta[1] + beta[8] + beta[21]) - ilogit(alpha.star) # POSE:coated
  diff_Beta[14] <- ilogit(alpha.star + beta[2] + beta[8] + beta[22]) - ilogit(alpha.star) # POFE:coated
  diff_Beta[15] <- ilogit(alpha.star + beta[3] + beta[8] + beta[23]) - ilogit(alpha.star) # VUMI:coated
  diff_Beta[16] <- ilogit(alpha.star + beta[4] + beta[8] + beta[24]) - ilogit(alpha.star) # ELEL:coated
  diff_Beta[17] <- ilogit(alpha.star + beta[5] + beta[6] + beta[25]) - ilogit(alpha.star) # high:fall
  diff_Beta[18] <- ilogit(alpha.star + beta[5] + beta[7] + beta[26]) - ilogit(alpha.star) # high:spring
  diff_Beta[19] <- ilogit(alpha.star + beta[5] + beta[8] + beta[27]) - ilogit(alpha.star) # high:coated
  diff_Beta[20] <- ilogit(alpha.star + beta[6] + beta[8] + beta[28]) - ilogit(alpha.star) # fall:coated
  diff_Beta[21] <- ilogit(alpha.star + beta[7] + beta[8] + beta[29]) - ilogit(alpha.star) # spring:coated
  
}