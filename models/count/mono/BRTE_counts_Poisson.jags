# Poisson-only model
# ANOVA model to predict theta, 2-way interactions included
# theta has random effects only for block (paddock within block is confounded with grazing + block)

model{
  for(i in 1:N){
    # Likelihood
    counts[i] ~ dpois(mu[i])

    # replicated data
    counts.rep[i] ~ dpois(mu[i])
    
    # Mean model of Poisson
    mu[i] <- theta[i]*area[i]
    
    # Regression model for theta (proportion) with random effects
    theta[i] <- exp(alpha + beta[1]*ELTR[i] + beta[2]*POFE[i] + beta[3]*POSE[i] +
    beta[4]*VUMI[i] + beta[5]*high[i] + beta[6]*fall[i] + beta[7]*spring[i] +
    beta[8]*coated[i] +
    beta[9]*ELTR[i]*high[i] + beta[10]*POFE[i]*high[i] + beta[11]*POSE[i]*high[i]+ beta[12]*VUMI[i]*high[i] +
    beta[13]*ELTR[i]*fall[i] + beta[14]*POFE[i]*fall[i] + beta[15]*POSE[i]*fall[i] + beta[16]*VUMI[i]*fall[i] + 
    beta[17]*ELTR[i]*spring[i] + beta[18]*POFE[i]*spring[i] + beta[19]*POSE[i]*spring[i] + beta[20]*VUMI[i]*spring[i] + 
    beta[21]*ELTR[i]*coated[i] + beta[22]*POFE[i]*coated[i] + beta[23]*POSE[i]*coated[i] + beta[24]*VUMI[i]*coated[i] + 
    beta[25]*high[i]*fall[i] + beta[26]*high[i]*spring[i] + beta[27]*high[i]*coated[i] + 
    beta[28]*fall[i]*coated[i] + beta[29]*spring[i]*coated[i] +
    eps[block[i]])

    # Part of Dsum calculation
    Sqdiff[i] <- pow(counts.rep[i] - counts[i], 2)
  }
  
  # Identifiable intercept, post sweeping random effect means into intercept
  alpha.star <- alpha + mean(eps[])
  
  # Relatively non-informative priors
  
  # random effects of block
  for(b in 1:Nb){ # number of blocks
    eps[b] ~ dnorm(0, tau.eps)
    
    # Identifiable random effects - post-sweeping of mean REs by block
    eps.star[b] <- eps[b] - mean(eps[])
  }
  
  # Block level precisions with folded T priors
  tau.Eps ~ dt(0, Bb, 2)
  sig.eps <- abs(tau.Eps)
  tau.eps <- pow(sig.eps, -2)
  
  # dt parameters (set as data)
  Bb <- 1/(Ab*Ab)
  
  # Coefficients
  alpha ~ dnorm(0, 0.0001)

  for(l in 1:nL){ # Number of treatment offsets
    beta[l] ~ dnorm(0, 0.0001)
  }
  
  # Calculations to monitor, only two-way combinations
  int_Beta[1] <- beta[1] + beta[5] + beta[9] # ELTR:high
  int_Beta[2] <- beta[2] + beta[5] + beta[10] # POFE:high
  int_Beta[3] <- beta[3] + beta[5] + beta[11] # POSE:high
  int_Beta[4] <- beta[4] + beta[5] + beta[12] # VUMI:high
  int_Beta[5] <- beta[1] + beta[6] + beta[13] # ELTR:fall
  int_Beta[6] <- beta[2] + beta[6] + beta[14] # POFE:fall
  int_Beta[7] <- beta[3] + beta[6] + beta[15] # POSE:fall
  int_Beta[8] <- beta[4] + beta[6] + beta[16] # VUMI:fall
  int_Beta[9] <- beta[1] + beta[7] + beta[17] # ELTR:spring
  int_Beta[10] <- beta[2] + beta[7] + beta[18] # POFE:spring
  int_Beta[11] <- beta[3] + beta[7] + beta[19] # POSE:spring
  int_Beta[12] <- beta[4] + beta[7] + beta[20] # VUMI:spring
  int_Beta[13] <- beta[1] + beta[8] + beta[21] # ELTR:coated
  int_Beta[14] <- beta[2] + beta[8] + beta[22] # POFE:coated
  int_Beta[15] <- beta[3] + beta[8] + beta[23] # POSE:coated
  int_Beta[16] <- beta[4] + beta[8] + beta[24] # VUMI:coated
  int_Beta[17] <- beta[5] + beta[6] + beta[25] # high:fall
  int_Beta[18] <- beta[5] + beta[7] + beta[26] # high:spring
  int_Beta[19] <- beta[5] + beta[8] + beta[27] # high:coated
  int_Beta[20] <- beta[6] + beta[8] + beta[28] # fall:coated
  int_Beta[21] <- beta[7] + beta[8] + beta[29] # spring:coated
  
  # Dsum: posterior predictive loss
  Dsum <- sum(Sqdiff)
}